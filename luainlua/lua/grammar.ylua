%require "luainlua.common.utils"
%require "luainlua.lua.tokenizer"

%file "luainlua/lua/parser"

%quote '(' LPAREN
%quote ',' COMMA
%quote ':' COLON
%quote '[' LBRACK
%quote ']' RBRACK
%quote '.' PERIOD
%quote '~=' NOTEQ
%quote '==' EQEQ
%quote '>=' GE
%quote '>' GT
%quote '<=' LE
%quote '<' LT
%quote '..' CONCAT
%quote '%' MOD
%quote '^' POW
%quote '/' DIV
%quote '*' MUL
%quote '-' MIN
%quote '+' PLUS
%quote '=' EQ
%quote '#' HASH
%quote ')' RPAREN
%quote ';' SEMICOLON
%quote '...' DOTS
%quote '{' LBRACE
%quote '}' RBRACE
%quote '::' QUAD
%quote 'function' FUNCTION
%quote 'true' TRUE
%quote 'false' FALSE
%quote 'nil' NIL
%quote 'or' OR
%quote 'and' AND
%quote 'return' RETURN
%quote 'local' LOCAL
%quote 'for' FOR
%quote 'in' IN
%quote 'do' DO
%quote 'end' END
%quote 'if' IF
%quote 'not' NOT
%quote 'then' THEN
%quote 'else' ELSE
%quote 'elseif' ELSEIF
%quote 'repeat' REPEAT
%quote 'until' UNTIL
%quote 'while' WHILE
%quote 'goto' GOTO
%quote 'break' BREAK

// Character classes of tokens
%production Name "class of valid identifiers"
%production String "class of valid strings"
%production Number "class of valid numbers"

%production FUNCTION
%production EQ
%production COMMA
%production QUAD
%production PERIOD
%production LPAREN
%production RPAREN
%production END
%production SEMICOLON
%production LBRACE
%production RBRACE
%production OR
%production AND
%production NOTEQ
%production EQEQ
%production GE
%production GT
%production LE
%production LT
%production CONCAT
%production MOD
%production POW
%production DIV
%production MUL
%production MIN
%production PLUS
%production LBRACK
%production RBRACK
%production LOCAL
%production FOR
%production IF
%production THEN
%production REPEAT
%production UNTIL
%production WHILE
%production DO
%production GOTO
%production BREAK
%production IN
%production RETURN
%production DOTS
%production TRUE
%production FALSE
%production NIL
%production ELSE
%production ELSEIF
%production HASH
%production NOT
%production COLON

%prologue {:
  function(stream)
    local tokens = {}
    for token in tokenizer(stream) do
      table.insert(tokens, token)
    end
    return tokens
  end
:}

// Let's create a set of trees where the children are recorded as integer indices
// and also as named fields
%code {:

local ast = {}
function ast:__newindex(key, val)
  if type(key) ~= 'string' then
    return rawset(self, key, val)
  end
  assert(not self[key], 'Fields passed to a node should be initialized only once.')
  rawset(self, key, val)
  -- other stuff
  if val.kind then
    table.insert(self, val)
    assert(not val.parent, 'Fields passed to a node should be unowned.')
    rawset(val, 'parent', self)
  end
end

function ast:set(key, val)
  if not key or not val then return self end
  if not val.kind then
    print(debug.traceback())
  end
  assert(val.kind, 'Set should only be called on child trees.')
  self[key] = val
  return self
end

function ast:list(...)
  local list = {...}
  for child in utils.loop(list) do
    if not child.kind then
      print(debug.traceback())
    end
    assert(child.kind, 'List should only be called on child trees.')
    table.insert(self, child)
    assert(not child.parent or child.parent.kind == 'explist', 'Children passed to list(...) should be unowned.')
    rawset(child, 'parent', self)
  end
  return self
end

function ast:children()
  return utils.loop(self)
end

local function node(location, kind)
  return setmetatable({kind = kind, location = location}, {__index = ast, __newindex = ast.__newindex})
end

local function from(token, kind)
  if not kind then
    if tostring(token) == 'Name' then
      kind = 'name'
    else
      kind = 'leaf'
    end
  end
  local leaf = node(token.location, kind)
  leaf.token = token
  leaf.value = token[2]
  return leaf
end
:}


// =======================================================================================
// ===                                 GRAMMAR RULES                                   ===
// =======================================================================================


// A lua file is just a block
root := $block [: _1 :]

block := $stat* $retstat? {: function(stats, ret)
  local tree = node((stats[1] and stats[1].location) or (ret[1] and ret[1].location), 'block')
  tree:list(unpack(stats))
  return tree:set('ret', (#ret ~= 0 and ret[1]) or nil) 
end
:}

stat :=
    ';' [: node(_1.location, 'empty') :]
  | $assignment_or_call [: _1 :]
  | $label [: _1 :]
  | 'break' [: node(_1.location, 'break') :]
  | 'goto' Name [: node(_1.location, 'goto'):set('label', from(_2)) :]
  | 'do' $block 'end' [: _2 :]
  | 'while' $exp 'do' $block 'end' [: node(_1.location, 'while'):set('cond', _2):set('block', _4) :]
  | 'repeat' $block 'until' $exp [: node(_1.location, 'repeat'):set('cond', _4):set('block', _2) :]
  | 'if' $exp 'then' $block
      ('elseif' $exp 'then' $block [: node(_1.location, 'elseif'):set('cond', _2):set('block', _4) :])*
      ('else' $block [: node(_1.location, 'else'):set('block', _2) :])? 'end'
      [: node(_1.location, 'if')
          :set('cond', _2)
          :set('block', _4)
          :set('elseifs', #_5 > 0 and node(_5[1].location, 'elseif'):list(unpack(_5)) or nil)
          :set('else_', _6[1]) :]
  | 'for' (
      <forcounter> Name '=' $exp ',' $exp (',' $exp [: _2 :])?  'do' $block 'end'
        [: node(_1.location, 'fori'):set('id', from(_1)):set('start', _3):set('finish', _5):set('step', _6[1]):set('block', _8) :]
    | <foreach> $namelist 'in' $explist 'do' $block 'end'
        [: node(_1.location, 'foreach'):set('names', _1):set('iterator', _3):set('block', _5) :])
          /* Whole action */ {: function(_1, _2) return _2 end :}
  | 'function' $funcname $funcbody {: function(_1, _2, _3)
      if _2.colon then
        local name = node(_3[1].location, 'name')
        name.value = 'self'
        table.insert(_3[1], 1, name)
      end
      return node(_1.location, 'functiondef'):set('funcname', _2):set('function', node(_3[1].location, 'function'):set('parameters', _3[1]):set('body', _3[2]))
    end
  :}
  | 'local' ('function' Name $funcbody
        [: node(_1.location, 'localfunctiondef'):set('name', from(_2)):set('function', node(_3[1].location, 'function'):set('parameters', _3[1]):set('body', _3[2])) :]
    | $namelist ('=' $explist [: _2 :])?
        [: node(_1.location, 'localassign'):set('left', _1):set('right', _2[1]) :]
        ) [: _2 :]

%resolve stat'group#2 Name {: function(self, tokens)
  if tostring(tokens[2]) == 'EQ' then
    return self:go 'forcounter'
  else
    return self:go 'foreach'
  end
end :}

// just return the explist
retstat := 'return' $explist? ';'? [: #_2 == 0 and node(_1.location, 'return') or node(_1.location, 'return'):set('explist', _2[1]) :]

label := '::' Name '::' [: node(_1.location, 'label'):set('name', from(_2)) :]

funcname := Name ('.' Name [: from(_2) :])* (':' Name [: from(_2) :])? {:
  function(name, names, colon)
    local tree = node(name.location, 'funcnames')
    colon = colon[1]
    tree:list(from(name))
    tree:list(unpack(names))
    if colon then
      tree.colon = colon
    end
    return tree
  end
:}

namelist := Name (',' Name [: from(_2) :])* {:
  function(name, names)
    local tree = node(name.location, 'names')
    tree:list(from(name))
    tree:list(unpack(names))
    return tree
  end
:}

explist := $exp (',' $exp [: _2 :])* {:
  function(exp, explist)
    local tree = node(exp.location, 'explist')
    tree:list(exp)
    tree:list(unpack(explist))
    return tree
  end
:}

%code {:
-- this will either reduce to an index, a call, a name, or a grouped expression
-- // Shape of a suffix: {index = shape(from(name)), args = shape(args)}
-- suffix := '.' Name {\: suffix_dot :\} // field
--         | '[' $exp ']' {\: suffix_bracket :\} // field
--         | ':' Name $args {\: suffix_colon :\} // arg
--         | $args {\: suffix_args :\} // arg
-- primaryexp := Name [: from(_1) :] 
--         | '(' $exp ')' [: _2 :]
-- primary_suffix := $primaryexp $suffix*
-- Plan: recurse on the structural inductive properties of a list
local function handle_primary_suffix(left, suffixlist)
  if #suffixlist == 0 then
    return left
  end
  -- pop the first element out of suffixlist
  local suffix = suffixlist[1]
  local rest = utils.sublist(suffixlist, 2)
  if suffix.index and not suffix.args then
    return handle_primary_suffix(
        node(left.location, 'index'):set('left', left):set('right', suffix.index),
        rest)
  elseif suffix.args and not suffix.index then
    return handle_primary_suffix(
        node(left.location, 'call'):set('target', left):set('args', suffix.args),
        rest)
  elseif suffix.args and suffix.index then
    local index = node(left.location, 'index'):set('left', left):set('right', suffix.index)
    return handle_primary_suffix(
        node(index.location, 'selfcall'):set('target', index):set('args', suffix.args),
        rest)
  end
  error 'unimplemented'
end
:}

%code {:
  local function suffix_dot(_, name)
    return {
      index = from(name, "string"),
      args = nil,
    }
  end
  local function suffix_bracket(_, exp)
    return {
      index = exp,
      args = nil,
    }
  end
  local function suffix_colon(_, name, args)
    return {
      index = from(name, "string"),
      args = args,
    }
  end
  local function suffix_args(args)
    return {
      index = nil,
      args = args,
    }
  end
:}

suffix := '.' Name {: suffix_dot :} | '[' $exp ']' {: suffix_bracket :} | ':' Name $args {: suffix_colon :} | $args {: suffix_args :}
primaryexp := Name [: from(_1) :] | '(' $exp ')' [: _2 :]

// %eps is func, the other 2 are assignments
// let's rule out the possibility of f() = x

assignment_or_call :=
    $primaryexp (
      '.' Name {: suffix_dot :}
    | '[' $exp ']' {: suffix_bracket :}
    | ':' Name $args {: suffix_colon :}
    | <call> $args {: suffix_args :})* $assignment?
  {:
    function(left, suffixes, assignment_opt)
      local assignment = #assignment_opt == 0 and {} or assignment_opt[1]
      -- let's reduce to call or assignment
      if (#suffixes == 0 or not suffixes[#suffixes].args) and #assignment == 0 then
        error('Parser error: you can only specify a call or an assignment here')
      end
      if #suffixes ~= 0 and #assignment ~= 0 and suffixes[#suffixes].args then
        error 'Parser error: you cannot assign to a call'
      end

      if #assignment ~= 0 then
        -- assignment case
        -- assignment is a list of subsequent assignments
        local ps = handle_primary_suffix(left, suffixes)
        assert(ps.kind == 'index' or ps.kind == 'name')
        local lvals, rvals = unpack(assignment)
        table.insert(lvals, 1, ps)
        lvals = node(ps.location, 'lvalues'):list(unpack(lvals))
        local tree = node(ps.location, 'assignments')
        tree.left = lvals
        tree.right = rvals
        return tree
      else
        -- call case
        local ps = handle_primary_suffix(left, suffixes)
        assert(ps.kind == 'call' or ps.kind == 'selfcall')
        return node(ps.location, 'callstmt'):list(ps)
      end
    end
  :}

assignment := ',' $primaryexp $suffix* $assignment 
      {:
        function(_, _1, _2, _3)
          local left, right = unpack(_3)
          table.insert(left, 1, handle_primary_suffix(_1, _2));
          return {left, right}
        end :}
    | '=' $explist [: {{}, _2} :]

// Hack to get around the fact that one branch of this is always
// "dead" states that would get killed later on anyways
%resolve assignment_or_call'star#1 '(' {: function(self, tokens)
  -- always reduce to call
  return self:go '#list'
end :}

// prefixexp := $var | $functioncall | '(' $exp ')'
// functioncall := $prefixexp ($args | ':' Name $args)
// varlist := $var (',' $var)*
// var := Name | $prefixexp ('[' $exp ']' | '.' Name)

args := '(' $explist? ')' [: (#_2 == 0 and node(_1.location, 'args')) or node(_1.location, 'args'):list(unpack(_2[1])) :]
      | $tableconstructor [: node(_1.location, 'args'):list(_1) :]
      | String [: node(_1.location, 'args'):list(from(_1, 'string')) :]

functiondef := 'function' $funcbody [: node(_1.location, 'function'):set('parameters', _2[1]):set('body', _2[2]) :]

funcbody := '(' $parlist? ')' $block 'end'
  {:
    function(_1, parameters_opt, _, block)
      local parameters = parameters_opt[1] or node(_1.location, 'parameters')
      return {parameters, block}
    end
  :}

// resolve conflict for parlist := (Name ',')+ Name; based on tokens[2] being , or not
%code {:
  local function parlist_namelist(namelist, trail)
    local parameters = node(namelist[1] and namelist[1].location or trail.location, 'parameters')
    for name in utils.loop(namelist) do
      parameters:list(from(name))
    end
    if trail[1] == 'DOTS' then
      rawset(parameters, 'vararg', from(trail))
    else
      parameters:list(from(trail))
    end
    return parameters
  end
:}

parlist := (<namelist> Name ',' [: _1 :])* (Name [: _1 :] | '...' [: _1 :]) 
  {: parlist_namelist :}

%resolve parlist'star#1 Name {: function(self, tokens)
  if tostring(tokens[2]) == 'COMMA' then
    return self:go '#list'
  else
    return self:go ''
  end
end :}

// TODO: ensure that only the last $field has an optional $fieldsep
tableconstructor := '{' $field* '}' 
    [: node(_1.location, 'table'):list(unpack(_2)) :]

// Conflict resolvers, since the approximation of Lua we're parsing is not LL(1) (but is LL(2))
field := '[' $exp ']' '=' $exp $fieldsep? [: node(_1.location, 'element'):set('index', _2):set('value', _5) :]
   | <assign> Name '=' $exp $fieldsep? [: node(_1.location, 'element'):set('index', from(_1, 'string')):set('value', _3) :]
   | <exp> $exp $fieldsep? [: node(_1.location, 'element'):set('value', _1) :]
%resolve field Name {: function(self, tokens)
  if tostring(tokens[2]) == 'EQ' then
    return self:go 'assign'
  else
    return self:go 'exp'
  end
end :}

fieldsep [: {} :] := ',' | ';'

level1 [: from(_1, 'op') :] := 'or'
level2 [: from(_1, 'op') :] := 'and'
level3 [: from(_1, 'op') :] := '<'  |  '>'  |  '<=' |  '>='  |  '~='  |  '=='
level4 [: from(_1, 'op') :] := '..'
level5 [: from(_1, 'op') :] := '+'  |  '-'
level6 [: from(_1, 'op') :] := '*'  |  '/'  |  '%'
level7 [: from(_1, 'op') :] := 'not' |  '#'  |  '-' // unary
level8 [: from(_1, 'op') :] := '^'

exp_stop :=
    'nil' [: node(_1.location, 'nil') :]
  | 'false' [: node(_1.location, 'false') :]
  | 'true' [: node(_1.location, 'true') :]
  | Number [: from(_1, 'number') :]
  | String [: from(_1, 'string') :]
  | '...' [: node(_1.location, 'vararg') :]
  | $functiondef [: _1 :]
  | $primaryexp $suffix* {: handle_primary_suffix :}
  | $tableconstructor [: _1 :]

%code {: local function goto_list(self) return self:go '#list' end :}
%resolve exp_stop'star#1 '[' {: goto_list :}
%resolve exp_stop'star#1 String {: goto_list :}
%resolve exp_stop'star#1 '{' {: goto_list :}
%resolve exp_stop'star#1 '(' {: goto_list :}

%code {:
  local make_binop = function(left, rest)
    if #rest == 0 then
      return left
    end
    assert(#rest == 2 and rest[1].kind == 'binop' and not rest[1].left)
    local hole, binop = unpack(rest)
    hole.left = left
    return binop
  end

  local start_binop = function(bop, right, rest)
    -- In ocaml style pseduocode
    -- let start (+) e_r rest =
    --   let o = hole() in
    --   match rest with
    --   | None -> o, (o (+) e_r)
    --   | Some(., e_l' (*) e_r' as e') ->
    --     let e'' = fill(e', ., (o (+) e_r) in
    --     o, e''
    -- Invariant: expn' is always "holed" and expn is always whole
    -- Invariant: immediately holed expn' is always holey on the left
    local hole = node(bop.location, 'binop')
    hole.operator = bop
    hole.right = right
    -- implicit: hole.left is the hole
    if #rest == 0 then
      return {hole, hole}
    end
    assert(#rest == 2 and rest[1].kind == 'binop' and not rest[1].left)
    rest[1].left = hole
    return {hole, rest[2]}
  end

  local function start_right_binop(bop, right)
    -- invariant: right is whole, return is immediately holed
    local hole = node(bop.location, 'binop')
    hole.operator = bop
    hole.right = right
    return hole
  end

  local function make_right_binop(left, binop_opt)
    local binop = binop_opt[1]
    if not binop then return left end
    assert(binop.kind == 'binop' and not binop.left)
    binop.left = left
    return binop
  end
:}


exp := $exp2 $exp' {: make_binop :} // left
exp' := $level1 $exp2 $exp' {: start_binop :} | %eps [: {} :]

exp2 := $exp3 $exp2' {: make_binop :} // left
exp2' := $level2 $exp3 $exp2' {: start_binop :} | %eps [: {} :]

exp3 := $exp4 $exp3' {: make_binop :} // left
exp3' := $level3 $exp4 $exp3' {: start_binop :} | %eps [: {} :]

exp4 := $exp5 ($level4 $exp4 {: start_right_binop :})? {: make_right_binop :} // right

exp5 := $exp6 $exp5' {: make_binop :} // left
exp5' := <minus> $level5 $exp6 $exp5' {: start_binop :} | %eps [: {} :]

exp6 := $exp7 $exp6' {: make_binop :} // left
exp6' := $level6 $exp7 $exp6' {: start_binop :} | %eps [: {} :]

exp7 := $level7 $exp7 [: node(_1.location, 'unop'):set('operator', _1):set('operand', _2) :] | $exp8 [: _1 :] // unary

exp8 := $exp_stop ($level8 $exp8 {: start_right_binop :})? {: make_right_binop :} // right

%resolve exp5' '-' {: function(self, tokens)
  return self:go 'minus'
end :}

binop [: from(_1, 'op') :] := '+' | '-' | '*' | '/' | '^' | '%' | '..' |
  '<' | '<=' | '>' | '>=' | '==' | '~=' | 
  'and' | 'or'

unop [: from(_1, 'op') :] := '-' | 'not' | '#'